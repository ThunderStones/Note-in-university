[33mcommit fce64ff20e60695d8abc86771e6c7209410dee04[m[33m ([m[1;36mHEAD -> [m[1;32mmain[m[33m, [m[1;31morigin/main[m[33m)[m
Author: ThunderStone <879068849@qq.com>
Date:   Sat Oct 31 22:57:54 2020 +0800

    undate C-string

[1mdiff --git a/C++/C++.md b/C++/C++.md[m
[1mindex 4a09df7..7aa4356 100644[m
[1m--- a/C++/C++.md[m
[1m+++ b/C++/C++.md[m
[36m@@ -731,4 +731,54 @@[m [mmyList[i-1] = temp[m
 [m
 ### 7.6 防止函数修改传递参数的数组[m
 [m
[31m-- 可以在函数中定义`const`数组参数来防止数组在函数被修改[m
\ No newline at end of file[m
[32m+[m[32m- 可以在函数中定义`const`数组参数来防止数组在函数被修改[m
[32m+[m
[32m+[m[32m- 	```c++[m
[32m+[m	[32mreturnValueType functionName(const arrayType [])[m
[32m+[m	[32m//如果对这个数组进行修改，编译器会报错[m
[32m+[m	[32m```[m
[32m+[m[41m	[m
[32m+[m[32m- 如果在函数f1中定义了一个`const`变量，而这个变量传递给了另一个函数f2，那么f2的对应参数必须声明为`const`类型，否组编译器会报错[m
[32m+[m
[32m+[m[32m### 7.7 数组作为函数值返回[m
[32m+[m
[32m+[m[32mC++不允许定义返回类型为数组的函数，但可以向函数传递两个参数，使函数返回一个数组[m
[32m+[m
[32m+[m[32m### 7.11 C字符串[m
[32m+[m
[32m+[m[32m- C字符串时一个字符数组，以`\0`(空终结符)结尾[m
[32m+[m
[32m+[m[32m#### 7.11.1 输入和输出C字符串[m
[32m+[m
[32m+[m[32m- 输出 `cout << s;`[m
[32m+[m
[32m+[m[32m- ```c++[m
[32m+[m	[32m//输入[m
[32m+[m	[32mchar s[5];[m
[32m+[m	[32mcin >> s;[m
[32m+[m	[32m```[m
[32m+[m
[32m+[m[32m- ```c++[m
[32m+[m	[32m//使用cin不能读取有空格的字符串[m
[32m+[m	[32m//可使用cin.getline()函数代替[m
[32m+[m	[32mcin.getline(char array[], int size, char delimitChar = '\n')[m
[32m+[m	[32m```[m
[32m+[m
[32m+[m[32m#### 7.11.2 C字符串函数[m
[32m+[m
[32m+[m[32m|                        函数                         |                      描述                      |[m
[32m+[m[32m| :-------------------------------------------------: | :--------------------------------------------: |[m
[32m+[m[32m|              `size_t strlen(char s[])`              |  返回字符串的长度，即在空字符串之前的字符个数  |[m
[32m+[m[32m|        `strcpy(char s1[], const char s2[])`         |              将字符串s2复制到s1中              |[m
[32m+[m[32m|   `strncpy(char s1[], const char s2[], size_t n)`   |        将字符串s2中前n个符号复制到s1中         |[m
[32m+[m[32m|        `strcat(char s1[], const char s2[])`         |             将字符串s2拼接到s1之后             |[m
[32m+[m[32m|   `strncat(char s1[], const char s2[], size_t n)`   |         将字符串前n个符号拼接到s1之后          |[m
[32m+[m[32m|      `int strcmp(char s1[], const char s2[])`       | 通过对比字符的数值码，判断s1和s2的大小并返回值 |[m
[32m+[m[32m| `int strncmp(char s1[], const char s2[], size_t n)` |                 对比前n个字符                  |[m
[32m+[m[32m|                `int atoi(char s[])`                 |            返回对应字符串的int型值             |[m
[32m+[m[32m|               `double atof(char s[])`               |           返回对应字符串的double型值           |[m
[32m+[m[32m|                `long atol(char s[])`                |            返回对应字符串的long型值            |[m
[32m+[m[32m|     `void itoa(int value, char s[], int radix)`     |   获得一个字符串的整数值，基于一个指定的集数   |[m
[32m+[m
[32m+[m[32m- 除了`atoi,atof,atol`定义在`cstdlib`头文件下，所有函数定义在`cstring`头文件下[m
[32m+[m[32m- `size_t`是一个C++类型，对于大多数编译器，它和`unsigned int`相同[m
\ No newline at end of file[m
